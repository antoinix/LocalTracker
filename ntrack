#! /bin/bash

# ntrack( Nerd Tracker ), a simple local document tracker which only focuses on the files in some specified abs pathes instead of file inodes.
# Source Code: https://github.com/antoinix/ntrack

# ============================================
# === Definition of Automatic Running Function
# ============================================

BeforeTheStart()
{
    # $1: ntrack dir
    # $2: target file
    if [[ ! -d $HOME/.config ]]; then
        mkdir $HOME/.config
    else
        if [[ ! -d $1 ]]; then
            mkdir $1
        fi
    fi

    if [[ ! -e $2 ]]; then
        touch $2
    fi

    result_1=$(sed -n '/^Target/ p' $2)
    result_2=$(sed -n '/^Journal/ p' $2)
    result_3=$(sed -n '/^Refresh/ p' $2)

    if [[ -z $result_1 || -z $result_2 || -z $result_3 ]]; then
        chmod +w $2
        echo -e "====================\nTarget List:\n\n"> $2
        echo -e "====================\nJournal Info:\n\n" >> $2
        echo -e "====================\nRefresh Date:\n\n" >> $2
    fi
    chmod +w $2
}

AtTheEnd()
{
    # $1: target file
    chmod -w $1
}


# ===================================================
# === Definition of Option-dependent Running Function
# ===================================================

# Show the detailed help information
HelpInfo()
{
printf "%s\n%s\n%s\n\n" "Usage: ntrack [OPTION] [FILE]" "Track the status of file in a specified path;" "Only focus on the absolute path instead of inode."
printf "%-5s %-20s %s\n" "" "-a, --add [FILE]" "add a target in target list"
printf "%-5s %-20s %s\n" "" "-d, --delete [FILE]" "delete the specified target from target list"
printf "%-5s %-20s %s\n" "" "-r, --refresh" "refresh the journal and clear broken target"
printf "%-5s %-20s %s\n" "" "-h. --help" "print the detailed help info"
printf "%-5s %-20s %s\n" "" "[NO OPTION]" "show the target file"
}

# If the file has no change, call it.
printf_clean()
{
    # $1: number
    # $2: file path
    # $3 $4: modification date
    printf "\033[40;36m%-5s\033[0m \033[40;37m%-40s\033[0m \033[40;34m%-20s\033[0m \033[40;34m[%-2s]\033[0m\n"\
        "#$1" "$2" "$3 $4" "${icon_array[0]}"

}

# If the file has been changed, call it.
printf_modify()
{
    # $1: number
    # $2: file path
    # $3 $4: modification date
    printf "\033[40;36m%-5s\033[0m \033[40;37m%-40s\033[0m \033[40;34m%-20s\033[0m \033[40;33;5m[%-2s]\033[0m\n"\
        "#$1" "$2" "$3 $4" "${icon_array[1]}"
}

# If the file is a accessible link
prinf_link()
{
    # $1: number
    # $2: file path
    # $3 $4: modification date
    printf "\033[40;36m%-5s\033[0m \033[40;37m%-40s\033[0m \033[40;34m%-20s\033[0m \033[40;35;5m[%-2s]\033[0m\n"\
        "#$1" "$2" "$3 $4" "${icon_array[2]}"
}

# If the file doesn't exist or is a broken link or a directory, call it.
printf_error()
{
    # $1: number
    # $2: file path
    printf "\033[40;36m%-5s\033[0m %-61s \033[40;31;5m[%-2s]\033[0m\n"\
        "#$1" "$2" "${icon_array[3]}"
}

# Arrange targets in the file
ArrangeTarget()
{
    # $1: target number
    array=() && index=0
    for counter in $(seq 1 $1); do
        result=$(sed -n "/^#$counter/ p" $target_file)
        if [[ -n $result ]]; then
            num=${result:1:1}
            array[$index]=$num
            index=$((index+1))
        fi
    done
    if [[ $index != $1 && $index -ge 1 ]]; then
        for rigister in $(seq 1 $index); do
            num=${array[$((rigister-1))]}
            sed -i "s/^#$num/#$rigister/g" $target_file
            sed -i "s/^$num/$rigister/g" $target_file
        done
    fi
}

# Add new targets in the file
AddTarget()
{
    # $1: target
    new_target_num=$(($target_num+1))
    if [[ $new_target_num = 1 ]]; then
        SaveRefreshDate
    fi
    date_info=$(stat $1 | sed -n '/^Modify/ p')
    sed -i "/^Target/ a $1" $target_file
    target_list_index=$(sed -n -e '/^Target/=' $target_file)
    sed -i "$((target_list_index+1)) s/^/#$new_target_num /g" $target_file
    journal_info_index=$(sed -n -e '/^Journal/=' $target_file)
    sed -i "/^Journal/ a $1" $target_file
    sed -i "$((journal_info_index+1)) s/^/$new_target_num /g" $target_file
    sed -i "$((journal_info_index+1)) a $date_info" $target_file
}

# Delete the specified target from the file
DeleteTarget()
{
    # $1: target
    for counter in $(seq 1 $target_num); do
        tmp=$(sed -n "/^#$counter/ p" $target_file) && file=${tmp#*\ }
        if [[ $1 == $file ]]; then
            # delete
            file_index=$(sed -n -e "/^$counter/=" $target_file)
            date_index=$(($file_index+1))
            file_in_list_index=$(sed -n -e "/^#$counter/=" $target_file)
            sed -i "$file_index, $date_index d" $target_file
            sed -i "$file_in_list_index d" $target_file

            ArrangeTarget $target_num;
            break
        else
            if [[ $counter = $target_num ]]; then
                echo no such a file
            fi
        fi
    done
    return 0
}

# Check for duplicate targets in the file
CheckRepeat()
{
    # $1: target
    for counter in $(seq 1 $target_num); do
        tmp=$(sed -n "/^#$counter/ p" $target_file) && file_original=${tmp#*\ }
        tmp=$(sed -n "/^$counter/ p" $target_file) && file_now=${tmp#*\ }
        if [[ $1 == $file_original || $1 == $file_now ]]; then
            return 1
        fi
    done
    return 0
}

# Refresh the target journal and sort targets
RefreshJournal()
{
    for counter in $(seq 1 $target_num); do
        tmp=$(sed -n "/^#$counter/ p" $target_file) && file=${tmp#*\ }
        file_index=$(sed -n -e "/^$counter/=" $target_file)
        date_index=$(($file_index+1))
        file_in_list_index=$(sed -n -e "/^#$counter/=" $target_file)

        # delete the old info in journal and list
        sed -i "$file_index, $date_index d" $target_file
        sed -i "$file_in_list_index d" $target_file

        # update the journal and the list if the file exists
        if [[ ! -L $file && -e $file && ! -d $file ]]; then
            date_info=$(stat $file | sed -n '/^Modify/ p')

            sed -i "/^Target/ a $file" $target_file
            target_list_index=$(sed -n -e '/^Target/=' $target_file)
            sed -i "$((target_list_index+1)) s/^/#$counter /g" $target_file
            sed -i "/^Journal/ a $file" $target_file
            journal_info_index=$(sed -n -e '/^Journal/=' $target_file)
            sed -i "$((journal_info_index+1)) s/^/$counter /g" $target_file
            sed -i "$((journal_info_index+1)) a $date_info" $target_file
        fi
    done
    ArrangeTarget $target_num;
}

# Write refresh date into the file
SaveRefreshDate()
{
    refresh_date=$(date "+%Y-%m-%d %H:%M:%S")
    refresh_date_index=$(sed -n -e "/^Refresh/=" $target_file)
    sed -i "$refresh_date_index d" $target_file
    new_date="Refresh Date: "$refresh_date
    sed -i "$((refresh_date_index-1)) a $new_date" $target_file
}

# Show the last refresh date and the number of the days passed since then
ShowRefreshDate()
{
    refresh_date_index=$(sed -n -e "/^Refresh/=" $target_file)
    result=$(sed -n "$refresh_date_index p" $target_file)
    refresh_date=$(echo $result | cut -d" " -f3) && now_date=$(date -I)
    full_refresh_date=$(echo $result | cut -d" " -f3,4)
    refresh_sec=$(date --utc -d $refresh_date +%s)
    now_sec=$(date --utc -d $now_date +%s)
    delta_date=$(($((now_sec-refresh_sec))/86400))
    printf "%-25s \033[40;32m%-10s %-9s\033[0m %-10s \033[40;33m%-1s\033[0m %-5s\n"\
        "Since Last Refresh Date:" $full_refresh_date "has passed" "$delta_date" "days"
}

# Show target journal
ShowJournal()
{
    icon_array=('üåú' 'üîç' 'üí£' '‚õî')
    if [[ -e $ntrack_dir/ntrack.conf ]]; then
        source $ntrack_dir/ntrack.conf
    fi

    if [[ $target_num -ge 1 ]]; then
        for counter in $(seq 1 $target_num); do
            tmp=$(sed -n "/^#$counter/ p" $target_file) && file=${tmp#*\ }
            file_index=$(sed -n -e "/^$counter/=" $target_file)
            date_index=$(($file_index+1))
            date_original=$(sed -n "$date_index p" $target_file)
            if [[ -L $file && -r $file ]]; then
                date_now=$(stat $file | sed -n '/^Modify/ p')
                formatted_date=$(echo $date_now | cut -d"." -f1 | cut -d" " -f2,3)
                printf_link $counter $file $formatted_date;
            else
                if [[ ! -e $file || -d $file ]]; then
                    printf_error $counter $file;
                else
                    date_now=$(stat $file | sed -n '/^Modify/ p')
                    formatted_date=$(echo $date_now | cut -d"." -f1 | cut -d" " -f2,3)
                    if [[ $date_original == $date_now ]]; then
                        printf_clean $counter $file $formatted_date;
                    else
                        printf_modify $counter $file $formatted_date;
                    fi
                fi
            fi
        done
    else
        echo -e "\n\033[40;33mNothing to do today\033[0m ‚öΩ\033[40;33m Have a good rest\033[0m \033[40;37müç∏\033[0m\n"
    fi
}


# ===========================
# ======= Function Call
# ===========================
ntrack_dir="$HOME/.config/ntrack"
target_file="$HOME/.config/ntrack/Target"

# read and source config file
if [[ -e $ntrack_dir/ntrack.conf ]]; then
    source $ntrack_dir/ntrack.conf
fi

BeforeTheStart $ntrack_dir $target_file;
target_num=$(sed -n '/^#/ p' $target_file | wc -l)

# refresh
if [[ $1 == '--refresh' || $1 == '-r' ]]; then
    if [[ $target_num -ge 1 ]]; then
        RefreshJournal && SaveRefreshDate
    else
        echo -e "\033[40;33mWarning:\033[0m nothing in the target file"
    fi

# add
elif [[ $1 == '--add' || $1 == '-a' ]]; then
    if [[ ! -L $2 && ! -d $2 && -e $2 ]]; then
        abs_path=$(realpath $2)
        CheckRepeat $abs_path;
        if [[ $? = 1 ]]; then
            echo -e "\033[40;33mWarning:\033[0m already exists in target file"
        else
            AddTarget $abs_path;
        fi
    else
        echo -e "\033[40;31mFile Error:\033[0m not a 'legal' file"
    fi

# delete
elif [[ $1 == '--delete' || $1 == '-d' ]]; then
    if [[ -z $2 ]]; then
        echo -e "\033[40;33mWarning:\033[0m no file specified"
    else
        if [[ $target_num -ge 1 ]]; then
            abs_path=$(realpath $2)
            DeleteTarget $abs_path;
        else
            echo -e "\033[40;33mWarning:\033[0m no such a file"
        fi
    fi

# help
elif [[ $1 == '--help' || $1 == '-h' ]]; then
    HelpInfo

# present
elif [[ -z $1 ]]; then
    ShowRefreshDate && ShowJournal

# option error
else
    echo -e "\033[40;31mOption Error:\033[0m use -h/--help options for help"
fi

AtTheEnd $target_file;
